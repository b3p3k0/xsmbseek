AUDIT_GUIDE.txt
================
Purpose: Single-source, copy-pasteable instructions for Claude Code (CC) to implement **safe-by-default SMB scanning** with an **optional, one-run SMB1 Discovery Mode** and a robust security/audit posture across the `smbseek` (engine/CLI) and `xsmbseek` (Tkinter GUI) repos.

Audience: AI coding agent + human reviewers (SecOps, UI/UX, PHM).

Scope:
- Default scanning: SMB2..SMB3 only, signing required.
- Optional SMB1 Discovery Mode: anonymous-only, discovery-only, one-run, explicit consent, strict caps/timeouts, no persistence.
- Engine + GUI modifications, config, tests, CI, audit greps, install instructions (dockerless option included).

----------------------------------------------------------------
1) THREAT MODEL (WHAT WE DEFEND AGAINST)
----------------------------------------------------------------
- Hostile SMB servers (esp. SMB1) sending malformed responses to trigger RCE/DoS in client libraries or smbclient output parsing.
- Credential exposure/downgrade (legacy NTLMv1/LM in SMB1).
- Parser abuse (oversized outputs, control chars, ANSI escapes).
- CSV/TSV export formula injection.
- Insecure subprocess usage (`shell=True`, unbounded stdout, no timeouts).

----------------------------------------------------------------
2) HIGH-LEVEL GOALS
----------------------------------------------------------------
- **Safe by default:** SMB2..SMB3, signing required.
- **Flexible with consent:** SMB1 Discovery Mode (anon-only, discovery-only) enabled **per run**; auto-off after completion.
- **No kernel mounts**; userspace enumeration only.
- **Strict caps/timeouts** everywhere; fail-closed parsing.
- **Impacket optional**: prefer if installed for SMB1; otherwise hardened `smbclient -L` fallback.
- **No credentials in SMB1 mode**. In SMB2/3 mode, allow anon, then guest/blank or guest/guest if configured.

----------------------------------------------------------------
3) ENGINE (smbseek) — CHANGES & TASKS
----------------------------------------------------------------
3.1 CLI FLAGS (edit: smbseek.py or main entry)
- Add:
  --enable-smb1           # enable SMB1 Discovery Mode for THIS RUN ONLY
  --yes-i-know            # required with --enable-smb1; acknowledges risk
  --sandbox-hint          # prints hardened container command (do not execute)
  (Optional) --config PATH  # existing behavior; keep
- Behavior:
  - Default (no --enable-smb1): pin dialects to SMB2..SMB3; require signing; allow anon first, then guest attempts if configured.
  - SMB1 mode: pin NT1 ONLY inside this flow; force anonymous auth; **discovery-only**; strict caps/timeouts; refuse credentials; no DFS; no file operations; auto-disable at process end.
  - On SMB1 start: print single WARNING banner. On exit: print “SMB1 mode ended; SMB1 remains disabled.”

3.2 CONFIG (conf/config.json) — LIMITS ONLY (do NOT persist enablement)
Add keys under `limits.smb` with these defaults:
  timeout_per_stage_seconds: 3
  timeout_per_host_seconds: 30
  max_pdu_bytes: 65536
  max_stdout_bytes: 10000
  max_shares: 256
  max_share_name_len: 80
  signing_required: true
  resolve_netbios: false
Notes:
- Maintain current config path: `conf/config.json`.
- If keys missing, use defaults above.
- Do not add any persistent “enable_smb1” key.

3.3 NEW MODULES
A) shared/proc.py
- Purpose: centralize **safe** subprocess execution.
- Function:
  run_safe(argv: list[str], timeout: int, max_stdout_bytes: int, env: dict|None) -> CompletedProcessLike
  Requirements:
    - Never shell=True; argv list only.
    - Set env defaults: LC_ALL=C, PATH=/usr/bin:/bin.
    - Enforce timeout.
    - Truncate/cap stdout to max_stdout_bytes; if exceeded, raise.
    - Return object with .stdout/.stderr/.returncode.

B) shared/safety.py
- Helpers:
  strip_control(text: str) -> str                  # drop NULs/ANSI/control chars
  validate_share_name(name: str, max_len: int) -> bool  # printable ASCII, <= max_len
  sanitize_csv_cell(value: str) -> str             # prefix ' if startswith (= + - @)

C) shared/smb_v1_probe.py
- Purpose: SMB1 Discovery Mode (anonymous-only, discovery-only).
- Functions:
  scan_host_smb1(host: str, limits: dict) -> list[dict]
    - Try Impacket path if available:
        negotiate SMB1 → anonymous SessionSetup → TreeConnect "IPC$"
        bind SRVSVC (UUID 4b324fc8-1670-01d3-1278-5a47bf6ee188)
        call NetShareEnumAll (level 1)
        enforce caps (max_pdu_bytes, max_shares, max_share_name_len)
        disconnect cleanly
      On exception/clean fail: proceed to fallback
    - Fallback: hardened smbclient -L:
        argv:
          ["smbclient","-L",f"//{host}","-N",
           "--option=client min protocol=NT1",
           "--option=client max protocol=NT1",
           "--option=client signing=required"]
        run via run_safe(..., timeout=timeout_per_host_seconds, max_stdout_bytes)
        parse with strict regex; whitelist share types: Disk/IPC/Printer
        enforce caps; drop control chars; fail-closed on anomalies
    - Return: list of { "name": str, "type": "Disk|IPC|Printer", "protocol": "SMB1" }

Notes:
- **No DFS referrals**; do not follow any redirections.
- **No file opens**; no TRANS2 directory listings.

3.4 EXISTING CODE MODS
- Dialect pinning:
  - Default scans: smbclient min=SMB2 max=SMB3; add signing=required.
  - SMB1 mode: smbclient min=NT1 max=NT1; signing=required.
- Credential policy:
  - SMB1 mode: **refuse** if any credentials supplied (exit with clear message).
  - Default: anon first; optionally attempt guest/blank or guest/guest afterward.
- Parsing hardening (smbclient output):
  - Drop control chars/NULs via strip_control.
  - Enforce line and byte caps; enforce max_shares and max_share_name_len.
  - Whitelist share types; fail-closed on unknown table formats.
- Storage/export:
  - Parameterized SQL for all DB writes.
  - CSV/TSV export: sanitize_csv_cell for formula injection protection.
- Logging:
  - Strip control chars before writing logs.
  - Do not embed untrusted strings into format placeholders.

3.5 SANDBOX HINT (for --sandbox-hint)
- Print (do not run) a command template:
  docker run --rm -it \
    --network host \
    --cap-drop ALL \
    --pids-limit 256 \
    --read-only \
    --tmpfs /tmp:rw,noexec,nosuid,nodev,size=64m \
    --security-opt no-new-privileges \
    --security-opt seccomp=/usr/share/containers/seccomp.json \
    --security-opt apparmor=docker-default \
    smbseek:latest --args...

3.6 NON-DOCKER SANDBOX (documented; optional use)
- Firejail example:
  firejail --caps.drop=all --noroot --private=~/tmp \
           --protocol=unix,inet,inet6 \
           ./smbseek.py <args>
- bwrap/chroot similarly; emphasize read-only FS and no new privileges.

----------------------------------------------------------------
4) GUI (xsmbseek, Tkinter) — CHANGES & TASKS
----------------------------------------------------------------
4.1 SMB1 ONE-RUN TOGGLE
- Add checkbox: “Enable SMB1 discovery (one run)”. Default OFF. Auto-reset to OFF after a run.
- On Scan click with toggle ON: show modal warning dialog with a required “I understand” checkbox; maps to engine flags `--enable-smb1 --yes-i-know`. If not acknowledged, abort run.

4.2 CREDENTIAL CONTROLS
- If SMB1 toggle ON: disable/clear username/password fields; show tooltip “SMB1 discovery uses anonymous only.”
- If OFF: allow anon, then guest attempts if configured.

4.3 POLICY BANNER (READ-ONLY)
- Normal: “Dialect SMB2..SMB3; Signing required.”
- SMB1: “Dialect NT1; Anonymous-only; Discovery-only; Strict caps/timeouts.”

4.4 LIMITS PANEL
- Numeric inputs for `limits.smb.*` (see §3.2). Validate ranges; write to `conf/config.json`.

4.5 RESULTS/LOGS
- Add “Protocol” column per host (“SMB2”, “SMB3”, “SMB1”).
- If SMB1 used: add subtle “Legacy (SMB1)” badge.
- Log pane must use strip_control; add “Copy sanitized” action.

4.6 PROCESS EXECUTION
- GUI invokes engine via `subprocess.run([...], timeout=..., text=True)` — never shell=True; fixed env (LC_ALL=C, PATH=/usr/bin:/bin).
- Map GUI options to CLI flags safely (argv list).

----------------------------------------------------------------
5) TESTS — MUST ADD & PASS
----------------------------------------------------------------
5.1 Parser Fuzz & Hostile Output
- tests/test_smbclient_parser_hostile_output.py
  - Inputs: extremely long lines; NULs; ANSI escapes; >10k fake shares; overlong share names; unknown types.
  - Expectation: **fail-closed**; no crash; host aborted.

5.2 Timeouts & Caps
- tests/test_timeouts_and_caps.py
  - Simulated slow server/output > max_stdout_bytes.
  - Expectation: stage and host timeouts enforced; truncation triggers abort.

5.3 CLI Guardrails
- tests/test_cli_guardrails.py
  - `--enable-smb1` without `--yes-i-know` → refuse with clear message.
  - Any credentials + `--enable-smb1` → refuse with clear message.
  - After SMB1 run ends → print end banner.

5.4 Dialect Pinning
- tests/test_dialect_pinning.py
  - Default: SMB2..SMB3 enforced.
  - SMB1 mode: NT1 enforced.

5.5 CSV Injection Guard
- tests/test_csv_injection_guard.py
  - Cells starting with = + - @ are prefixed with a single quote.

----------------------------------------------------------------
6) CI — FAIL FAST ON UNSAFE PATTERNS
----------------------------------------------------------------
- Build & run tests (optionally inside Dockerfile.sandbox if your CI supports containers).
- Grep bans:
  - Fail build if any match:
    - `shell=True`
    - `os.system(` 
    - `eval(` or `exec(` acting on network-derived data
- Lint for parameterized SQL (ban string-concatenated SQL).
- Ensure conf/config.json defaults are respected when keys absent.

----------------------------------------------------------------
7) BLACKHAT/“GREYBEARD” AUDIT GREPS (RUN LOCALLY)
----------------------------------------------------------------
(Use ripgrep `rg`; adapt paths as needed.)

# In both repos:
rg -n "shell\s*=\s*True|os\.system\(|popen\(|eval\(|exec\("

# smbclient usage must be argv list w/ options pinned:
rg -n "smbclient" | rg -n -v "client min protocol=SMB2|client max protocol=SMB3|client min protocol=NT1|client max protocol=NT1"

# Check that signing is required in both paths where applicable:
rg -n "signing=required"

# Detect any kernel mounts (disallowed for discovery):
rg -n "mount\.cifs|gio mount|gvfs|smb:\/\/"

# Parser safety: ensure caps/timeouts referenced near reads/parsing:
rg -n "read\(|decode\(|split\("

# SQL concatenation (ban):
rg -n "execute\(.+\+|f\"SELECT|format\(.+SELECT"

# CSV export points:
rg -n "to_csv|writerow|DictWriter"  # verify sanitize_csv_cell used

# Logs: detect formatting with untrusted data:
rg -n "logger\.\w+\(.*%s"

----------------------------------------------------------------
8) BARE-METAL INSTALL (DEBIAN/UBUNTU/KALI)
----------------------------------------------------------------
# System packages
sudo apt update
sudo apt install -y python3 python3-venv python3-pip smbclient

# Optional (preferred for SMB1 Impacket path)
python3 -m venv venv
. venv/bin/activate
pip install --upgrade pip wheel
pip install impacket

# Engine
git clone https://github.com/b3p3k0/smbseek
cd smbseek
pip install -r requirements.txt  # keep lightweight; Impacket optional
cp conf/config.json.example conf/config.json
# Edit conf/config.json (e.g., Shodan key, limits.smb.* if desired)

# Safe default scan (SMB2..SMB3):
./smbseek.py run <args>

# SMB1 Discovery Mode (one run; anon-only; explicit consent):
./smbseek.py run --enable-smb1 --yes-i-know <args>

# GUI
cd ..
git clone https://github.com/b3p3k0/xsmbseek
cd xsmbseek
./xsmbseek --smbseek-path ../smbseek/smbseek.py

# Optional non-docker sandbox (firejail):
sudo apt install -y firejail
firejail --caps.drop=all --noroot --private=~/tmp --protocol=unix,inet,inet6 ../smbseek/smbseek.py run <args>

----------------------------------------------------------------
9) ACCEPTANCE CRITERIA (DEFINITION OF DONE)
----------------------------------------------------------------
- Default run negotiates **SMB2..SMB3** only, signing required; no SMB1 contacts occur.
- SMB1 Discovery Mode requires `--enable-smb1 --yes-i-know`; refuses credentials; performs **only** SRVSVC NetShareEnumAll; enforces caps/timeouts; prints start/end banners; **does not persist** enablement.
- Parser rejects hostile outputs cleanly; no crashes; per-host watchdogs respected.
- Exports guard against CSV formula injection.
- CI fails on unsafe subprocess usage or string-concatenated SQL.
- GUI maps SMB1 toggle → flags; disables creds in SMB1; presents limits and policy status; shows protocol column; sanitizes logs.

----------------------------------------------------------------
10) TASK CHECKLIST (EXECUTION ORDER FOR CC)
----------------------------------------------------------------
[ ] Add CLI flags & banners in smbseek.py; wire one-run SMB1 mode.
[ ] Implement `shared/proc.py::run_safe`.
[ ] Implement `shared/safety.py` helpers.
[ ] Implement `shared/smb_v1_probe.py::scan_host_smb1` (Impacket-first; smbclient fallback).
[ ] Pin dialects & signing in default and SMB1 branches.
[ ] Enforce SMB1 anon-only; refuse creds.
[ ] Harden parsing; integrate strip_control, caps, whitelists.
[ ] Parameterize all SQL; add CSV sanitize on export.
[ ] Update config loader for limits.smb.* (defaults if missing).
[ ] Add tests: parser-fuzz, caps/timeouts, CLI guardrails, dialect pinning, CSV injection.
[ ] Add CI grep bans; run tests in CI.
[ ] xsmbseek: add SMB1 toggle, modal warning, limits pane, policy banner, protocol column, sanitized logs; ensure argv-list subprocess.
[ ] Update READMEs (engine + GUI) with safety model, flags, and install instructions (including non-docker sandbox).
[ ] Run audit greps; fix any hits.
[ ] Manual acceptance run on known SMB2/3 hosts; controlled SMB1 testbed to verify one-run behavior and caps.

----------------------------------------------------------------
11) NOTES FOR PHM / SO / UI TEAMS
----------------------------------------------------------------
- SMB2 is **not** excluded; default scans cover SMB2 and SMB3. SMB1 is behind an explicit, ephemeral consent gate.
- “guest/guest” and “guest/blank” are allowed **only** in SMB2/3 mode; SMB1 mode enforces anonymous-only for safety.
- GUI presents clear one-run SMB1 switch with confirmation; policy and limits visible; results annotated with protocol.
- All safety choices favor **short exposure, minimal parsing surface, and fail-closed behavior**.
